ZADANIE 10 (8p)

Stworzyć klasę ArrayBox reprezentujacą obiekty-zestawy elementów unikalnych, porównywalnych wraz operacjami na nich. Elementy zestawu należą do jednego, ale dowolnego typu T. Porządek między elementami-obiektami danego typu-klasy jest określany przez implementację sparametryzowanej wersji  interfejsu Comparable w klasie obiektów.

Elementy zestawu muszą być przechowywane w tablicy.

Klasa ArrayBox powinna posiadać między innymi następujące konstrutor/metody:

a. ArrayBox(int) - utworzy nowy zestaw elementów z początkową pojemnością.

b. boolean add(T) - dodaje element do zestawu, o ile nie było go w zestawie przed operacją, rezultat true oznacza, że element został dodany do zestawu, false wpp. Należy odpowiednio zwiększyć pojemność zestawu w przypadku braku miejsca dla nowego elementu.
c. boolean addAll(T[]) - dodaje elementy podanej tablicy elementów do zestawu, o ile nie było ich w zestawie przed operacją, rezultat true oznacza, że co najmniej jeden element tablicy został dodany do zestawu, false wpp. Należy odpowiednio zwiększyć pojemność zestawu w przypadku braku miejsc dla nowych elementów.
d. boolean delete(T) - usuwa element z zestawu, o ile wystąpił on w zestawie przed operacją, rezultat true oznacza, że element został usunięty z zestawu, false wpp.
e. boolean swap(int, int) - zamiana elementów w zestawie na dwóch podanych pozycjach, rezultat true oznacza sukces operacji, false wpp.
f. T min() (T max()) - znajdowanie, bez sortowania, minimum (maksimum) zestawu zgodnie ze zdefiniowanym porządkiem.
g. int search(T) - sprawdzanie, czy podany element znajduje się w zestawie, zwraca indeks znalezionego elementu lub -1 wpp.
h. void print() - wyświetla wszystkie elementy zestawu.

W celu testowania, utworzyć klasę Osoba (z polami String nazwisko, int wiek), Student (rozszerzającą Osoba z dodatkowym polem int numerGrupy) posiadające możliwość porównywania obiektów według następujących kryteriów uporządkowania:
a. wśród elementów typu Osoba porównujemy najpierw nazwiska, w dalszej kolejności wiek (jeśli nazwiska są takie same).
b. wśród elementów typu Student porównujemy najpierw nazwiska, w dalszej kolejności wiek, potem numer grupy.

Test

Wykonać test WSZYSTKICH metod klasy ArrayBox. Przykładowo, poniższy kod (zawierający tylko niektóre metody klasy ArrayBox) powinien się kompilować oraz dawać poprawne wyniki.

            ArrayBox<Osoba>  bo = new ArrayBox<>(2);
           
            bo.add(new Osoba("Kowalski", 19));                        // nazwisko = "Kowalki", wiek = 19
            bo.add(new Student("Kowalska", 18, 100));                    // nazwisko, wiek, grupa = 100
            bo.add(new Student("Kowalska", 20, 200));
           
            Osoba[] to = new Osoba[] {new Osoba("Nowak", 21), new Student("Nowak", 22, 200)};
            bo.addAll(to);

            System.out.println(bo.min());                                           // Student 1: Kowalska, 18, 100
                     
            ArrayBox<Student> bst = new ArrayBox<>(1);
            bst.add(new Student("Nowacka", 24, 100));      
            bst.add(new Student("Nowacka", 24, 300));
            bst.add(new Student("Nowacka", 24, 200));

            System.out.println(bst.max());                                          // Student 5: Nowacka, 24, 300
         
            ArrayBox<Integer> bi = new ArrayBox<>(2);
            Integer[] ti = new Integer[] {Integer.valueOf(1), 2, 3};
            bi.addAll(ti);
          
            bi.print();                                                                          // 1, 2, 3
           
            ArrayBox<String> bs = new ArrayBox<>(1);
            String[] ts = new String[] {"cpp", new String("java")};
            bs.addAll(ts);
            bs.swap(0,1);
            bs.print();                                                                         // java, cpp