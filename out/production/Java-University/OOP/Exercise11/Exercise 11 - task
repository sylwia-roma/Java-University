Zadanie 11 (4p)

Zbudować klasę StringTask, symulującą długotrwałe obliczenia, tu polegające na konkatenacji odwróconych napisów.
Konstruktor klasy otrzymuje jako argument napis do powielenia oraz liczbę oznaczającą ile razy ten napis ma być powielony (np. dla "abc" i 3 wynik to "cbacbacba")
Klasa winna implementować interfejs Runnable, a w jej metodzie run() wykonywane jest powielenie napisu, przy czym to powielenie i inne operacje na napisach mają się odbywać za pomocą operatora '+' stosowanego wobec zmiennych typów String / char (to właśnie długotrwała operacja). Użycie '+' jest warunkiem obowiązkowym.

Obiekt klasy StringTask traktujemy jako zadanie, które może się wykonywać równolegle z innymi.
Możliwe stany zadania to:
CREATED  - zadanie utworzone, ale nie zaczęło się jeszcze wykonywać,
RUNNING - zadanie się wykonuje w odrębnym wątku,
ABORTED - wykonanie zadania zostało przerwane,
READY - zadanie zakończyło się pomyślnie i są gotowe wyniki.
W klasie StringTask zdefiniować m. in. metody:
  public String getResult()  - zwracającą wynik konkatenacji
  public TaskState getState()  - zwracającą stan zadania
  public void start() - uruchamiającą zadanie w odrębnym watku
  public void abort() - przerywającą wykonanie kodu zadania i działanie wątku
  public boolean isDone()  - zwracającą true, jeśli wykonanie zadania się zakończyło normalnie lub przez przerwanie, false w przeciwnym razie
Poniższy kod program:
public class Main {

  public static void main(String[] args) throws InterruptedException {
    StringTask task = new StringTask("ABC", 50000);
    System.out.println("Task " + task.getState());
    task.start();
    if (args.length > 0 && args[0].equals("abort")) { 
    /*<- tu zapisać kod przerywający działanie tasku po sekundzie 
         i uruchomic go (tj. kod) w odrębnym wątku (tzn. innym niż main)
    */
    }
    while (!task.isDone()) {
      Thread.sleep(500);
      switch(task.getState()) {
        case RUNNING: System.out.print("R."); break;
        case ABORTED: System.out.println(" ... aborted."); break;
        case READY: System.out.println(" ... ready."); break;
        default: System.out.println("uknown state");
      }
      
    }
    System.out.println("Task " + task.getState());
    System.out.println(task.getResult().length());
    System.out.println(task.getResult().substring(0,task.getTxt().length()));
  }

}

uruchomiony bez argumentu powinien wyprowadzić coś w rodzaju:
Task CREATED
R.R.R.R.R. ... ready.
Task READY
150000
CBA

a uruchomiony z argumentem "abort" może wyprowadzić:
Task CREATED
R. ... aborted.
Task ABORTED
95736
CBA


Uwaga 1. Plik Main.java może być modyfikowany tylko w miejscu oznaczonym /*<- */
Uwaga 2. Nie wolno używać metody System.exit(...).
Uwaga 3: warto zastosować lambda-wyrażenie (tam gdzie możliwe).